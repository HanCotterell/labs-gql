swagger: "2.0"
info:
  title: v2 API Docs
  version: v2
definitions:
  AccessToken:
    properties:
      token:
        type: string
        format: CharField
      issuer:
        type: string
        format: CharField
      expires:
        type: string
        format: DateTimeWithUtcZAtEndField
    required:
      - token
      - issuer
      - expires
  Assertion:
    properties:
      entityType:
        type: string
        format: string
        description: '"Assertion"'
        readOnly: true
      entityId:
        type: string
        format: string
        description: Unique identifier for this Assertion
        readOnly: true
      openBadgeId:
        type: string
        format: url
        description: URL of the OpenBadge compliant json
        readOnly: true
      createdAt:
        type: string
        format: ISO8601 timestamp
        description: Timestamp when the Assertion was created
        readOnly: true
      createdBy:
        type: string
        format: entityId
        description: BadgeUser who created the Assertion
        readOnly: true
      badgeclass:
        type: string
        format: entityId
        description: BadgeClass that issued this Assertion
        required: false
      badgeclassOpenBadgeId:
        type: string
        format: url
        description: URL of the BadgeClass to award
        required: false
      issuer:
        type: string
        format: EntityRelatedFieldV2
      issuerOpenBadgeId:
        type: string
        format: URLField
      image:
        type: string
        format: url
        description: URL to the baked assertion image
        readOnly: true
      recipient:
        type: object
        $ref: "#/definitions/BadgeRecipient"
        description: Recipient that was issued the Assertion
        required: false
      issuedOn:
        type: string
        format: ISO8601 timestamp
        description: Timestamp when the Assertion was issued
        required: false
      narrative:
        type: string
        format: markdown
        description: Markdown narrative of the achievement
        required: false
      evidence:
        type: array
        items:
          $ref: "#/definitions/AssertionEvidence"
        description: List of evidence associated with the achievement
        required: false
      revoked:
        type: boolean
        description: True if this Assertion has been revoked
        readOnly: true
      revocationReason:
        type: string
        format: string
        description: Short description of why the Assertion was revoked
        readOnly: true
      acceptance:
        type: string
        description: "Recipient interaction with Assertion. One of: Unaccepted, Accepted, or Rejected"
        readOnly: true
      expires:
        type: string
        format: ISO8601 timestamp
        description: Timestamp when the Assertion expires
        required: false
      extensions:
        type: string
        format: DictField
      badgeclassName:
        type: string
        format: string
        description: Name of BadgeClass to create assertion against, case insensitive
        required: false
      allowDuplicateAwards:
        type: boolean
        description: If set to false, the badge won't be awarded if the recipient already has it. HTTP 400 will be returned.
        required: false
    required: []
  AssertionEvidence:
    properties:
      url:
        type: string
        format: url
        description: URL of a webpage presenting evidence of the achievement
      narrative:
        type: string
        format: markdown
        description: Markdown narrative that describes the achievement
    required: []
  BackpackAssertion:
    properties:
      entityType:
        type: string
        format: string
        description: '"Issuer"'
        readOnly: true
      entityId:
        type: string
        format: string
        description: Unique identifier for this Issuer
        readOnly: true
      acceptance:
        type: string
        format: ChoiceField
      openBadgeId:
        type: string
        format: url
        description: URL of the OpenBadge compliant json
        readOnly: true
      badgeclass:
        type: string
        format: entityId
        description: BadgeClass that issued this Assertion
        required: false
      badgeclassOpenBadgeId:
        type: string
        format: url
        description: URL of the BadgeClass to award
        readOnly: true
      issuer:
        type: string
        format: EntityRelatedFieldV2
      issuerOpenBadgeId:
        type: string
        format: URLField
      image:
        type: string
        format: url
        description: URL to the baked assertion image
        readOnly: true
      recipient:
        type: object
        properties:
          identity:
            type: string
            format: string
            description: Either the hash of the identity or the plaintext value
            required: true
          type:
            type: string
            enum:
              - email
              - openBadgeId
              - telephone
              - url
            description: Type of identifier used to identify recipient
            required: false
          hashed:
            type: boolean
            description: Whether or not the identity value is hashed.
            required: false
          plaintextIdentity:
            type: string
            description: The plaintext identity
            required: false
        description: Recipient that was issued the Assertion
        required: true
      issuedOn:
        type: string
        format: ISO8601 timestamp
        description: Timestamp when the Assertion was issued
        required: true
      narrative:
        type: string
        format: markdown
        description: Markdown narrative of the achievement
        required: false
      evidence:
        type: array
        items:
          $ref: "#/definitions/AssertionEvidence"
        description: List of evidence associated with the achievement
        required: false
      revoked:
        type: boolean
        description: True if this Assertion has been revoked
        readOnly: true
      revocationReason:
        type: string
        format: string
        description: Short description of why the Assertion was revoked
        readOnly: true
      expires:
        type: string
        format: ISO8601 timestamp
        description: Timestamp when the Assertion expires
        required: false
      pending:
        type: string
        format: ReadOnlyField
    required:
      - recipient
  BadgeClass:
    properties:
      entityType:
        type: string
        format: string
        description: '"BadgeClass"'
        readOnly: true
      entityId:
        type: string
        format: string
        description: Unique identifier for this BadgeClass
        readOnly: true
      openBadgeId:
        type: string
        format: url
        description: URL of the OpenBadge compliant json
        readOnly: true
      sourceUrl:
        type: string
        format: URLField
      originalJson:
        type: string
        format: StripTagsCharField
      createdAt:
        type: string
        format: ISO8601 timestamp
        description: Timestamp when the BadgeClass was created
        readOnly: true
      createdBy:
        type: string
        format: entityId
        description: BadgeUser who created this BadgeClass
        readOnly: true
      issuer:
        type: string
        format: entityId
        description: entityId of the Issuer who owns the BadgeClass
        required: false
      issuerOpenBadgeId:
        type: string
        format: URLField
      name:
        type: string
        format: string
        description: Name of the BadgeClass
        required: true
      image:
        type: string
        format: data:image/png;base64
        description: Base64 encoded string of an image that represents the BadgeClass.
        required: false
      description:
        type: string
        format: string
        description: Short description of the BadgeClass
        required: true
      achievementType:
        type: string
        description: The type of achievement
        required: false
        enum:
          - Achievement
          - Assessment
          - Assignment
          - Award
          - Badge
          - Certificate
          - Certification
          - Course
          - CommunityService
          - Competency
          - Co-Curricular
          - Degree
          - Diploma
          - Fieldwork
          - License
          - Membership
      criteriaUrl:
        type: string
        format: url
        description: External URL that describes in a human-readable format the criteria for the BadgeClass
        required: false
      criteriaNarrative:
        type: string
        format: markdown
        description: Markdown formatted description of the criteria
        required: false
      alignments:
        type: array
        items:
          $ref: "#/definitions/BadgeClassAlignment"
        description: List of objects describing objectives or educational standards
        required: false
      tags:
        type: array
        items:
          type: string
          format: string
        description: List of tags that describe the BadgeClass
        required: false
      expires:
        $ref: "#/definitions/BadgeClassExpiration"
        description: Expiration period for Assertions awarded from this BadgeClass
        required: false
      extensions:
        type: string
        format: DictField
      archived:
        type: boolean
        description: Whether or not the BadgeClass is archived
        required: false
      archivedDate:
        type: string
        format: ISO8601 timestamp
        description: Timestamp when the BadgeClass was archived
        readOnly: true
        required: false
    required:
      - name
      - description
  BadgeClassAlignment:
    properties:
      targetName:
        type: string
        format: StripTagsCharField
      targetUrl:
        type: string
        format: URLField
      targetDescription:
        type: string
        format: StripTagsCharField
      targetFramework:
        type: string
        format: StripTagsCharField
      targetCode:
        type: string
        format: StripTagsCharField
    required:
      - targetName
      - targetUrl
  BadgeClassExpiration:
    properties:
      amount:
        type: string
        format: IntegerField
      duration:
        type: string
        format: ChoiceField
    required:
      - amount
      - duration
  BadgeRecipient:
    properties:
      identity:
        type: string
        format: string
        description: Either the hash of the identity or the plaintext value
      hashed:
        type: boolean
        description: Whether or not the identity value is hashed.
      type:
        type: string
        enum:
          - email
          - openBadgeId
          - telephone
          - url
        description: Type of identifier used to identify recipient
      plaintextIdentity:
        type: string
        description: The plaintext identity
      salt:
        type: string
        description: An optional salt used in producing the hashed identity if hashed
    required:
      - identity
  BadgeUser:
    properties:
      entityType:
        type: string
        format: string
        description: '"BadgeUser"'
      entityId:
        type: string
        format: string
        description: Unique identifier for this BadgeUser
      firstName:
        type: string
        format: string
        description: Given name
      lastName:
        type: string
        format: string
        description: Family name
      emails:
        type: array
        items:
          $ref: "#/definitions/BadgeUserEmail"
      url:
        type: string
        format: ListField
      telephone:
        type: string
        format: ListField
      agreedTermsVersion:
        type: string
        format: IntegerField
      hasAgreedToLatestTermsVersion:
        type: string
        format: SerializerMethodField
      marketingOptIn:
        type: string
        format: BooleanField
      badgrDomain:
        type: string
        format: CharField
      hasPasswordSet:
        type: string
        format: BooleanField
      recipient:
        type: string
        format: SerializerMethodField
    required:
      - firstName
      - lastName
  BadgeUserEmail:
    properties:
      email:
        type: string
        format: email
        description: Email address associated with a BadgeUser
      verified:
        type: boolean
        description: True if the email address has been verified
      primary:
        type: boolean
        description: True for a single email address to receive email notifications
      caseVariants:
        type: string
        format: ListField
    required:
      - email
  BadgeUserToken:
    properties:
      token:
        type: string
        format: string
        description: Access token to use in the Authorization header
    required: []
  Collection:
    properties:
      entityType:
        type: string
        format: string
        description: '"Collection"'
      entityId:
        type: string
        format: string
        description: Unique identifier for this Collection
      name:
        type: string
        format: string
        description: Name of the Collection
      description:
        type: string
        format: text
        description: Short description of the Collection
      owner:
        type: string
        format: EntityRelatedFieldV2
      share_url:
        type: string
        format: url
        description: A public URL for sharing the Collection. Read only.
      shareHash:
        type: string
        format: url
        description: The share hash that allows construction of a public sharing URL. Read only.
      published:
        type: boolean
        description: True if the Collection has a public share URL
      assertions:
        type: array
        items:
          $ref: "#/definitions/Assertion"
        description: List of Assertions in the collection
      createdAt:
        type: string
        format: ISO8601 timestamp
        description: Timestamp when the Collection was created
      createdBy:
        type: string
        format: entityId
        description: BadgeUser who created this Collection
    required:
      - name
  Issuer:
    properties:
      entityType:
        type: string
        format: string
        description: '"Issuer"'
        readOnly: true
      entityId:
        type: string
        format: string
        description: Unique identifier for this Issuer
        readOnly: true
      openBadgeId:
        type: string
        format: url
        description: URL of the OpenBadge compliant json
        readOnly: true
      sourceUrl:
        type: string
        format: URLField
      originalJson:
        type: string
        format: StripTagsCharField
      createdAt:
        type: string
        format: ISO8601 timestamp
        description: Timestamp when the Issuer was created
        readOnly: true
      createdBy:
        type: string
        format: entityId
        description: BadgeUser who created this Issuer
        required: false
      name:
        type: string
        format: string
        description: Name of the Issuer
        required: true
      image:
        type: string
        format: data:image/png;base64
        description: Base64 encoded string of an image that represents the Issuer
        required: false
      email:
        type: string
        format: email
        description: Contact email for the Issuer
        required: true
      description:
        type: string
        format: text
        description: Short description of the Issuer
        required: false
      url:
        type: string
        format: url
        description: Homepage or website associated with the Issuer
        required: false
      staff:
        type: array
        items:
          $ref: "#/definitions/IssuerStaff"
      extensions:
        type: string
        format: DictField
      badgrDomain:
        type: string
        format: SlugRelatedField
    required:
      - name
      - email
      - url
  IssuerStaff:
    properties:
      userProfile:
        type: string
        format: StaffUserProfileSerializerV2
      user:
        type: string
        format: EntityRelatedFieldV2
      role:
        type: string
        enum:
          - staff
          - editor
          - owner
    required:
      - user
      - role
  IssuerStaffRecipient:
    properties:
      email:
        type: string
        format: email
        description: Email address associated with the staff member
      role:
        type: string
        enum:
          - staff
          - editor
          - owner
      status:
        type: string
        readOnly: true
    required:
      - email
      - role
parameters: {}
paths:
  /v2/issuers:
    get:
      parameters: []
      security:
        - oauth2:
            - rw:issuer
      responses:
        "200":
          schema:
            type: array
            items:
              $ref: "#/definitions/Issuer"
          description: Successful operation
      summary: Get a list of Issuers for authenticated user
      tags:
        - Issuers
    post:
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Issuer"
      security:
        - oauth2:
            - rw:issuer
      responses:
        "201":
          schema:
            $ref: "#/definitions/Issuer"
          description: Successfully created
        "400":
          description: Validation error
      summary: Create a new Issuer
      tags:
        - Issuers
  /v2/issuers/ref/{issuer_ref}:
    get:
      parameters:
        - in: path
          name: issuer_ref
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
            - rw:serverAdmin
      responses:
        "200":
          schema:
            $ref: "#/definitions/Issuer"
          description: Successful operation
        "404":
          description: Issuer not found
      summary: Get a single Issuer
      tags:
        - Issuers
    put:
      parameters:
        - in: path
          name: issuer_ref
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Issuer"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
            - rw:serverAdmin
      responses:
        "200":
          schema:
            $ref: "#/definitions/Issuer"
          description: Successfully updated
        "400":
          description: Validation error
        "404":
          description: Issuer not found
      summary: Update a single Issuer
      tags:
        - Issuers
    delete:
      parameters:
        - in: path
          name: issuer_ref
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
            - rw:serverAdmin
      responses:
        "204":
          description: Issuer was deleted successfully.
        "404":
          description: Issuer not found
      summary: Delete a single Issuer
      tags:
        - Issuers
  /v2/issuers/{entity_id}:
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
            - rw:serverAdmin
      responses:
        "200":
          schema:
            $ref: "#/definitions/Issuer"
          description: Successful operation
        "404":
          description: Issuer not found
      summary: Get a single Issuer
      tags:
        - Issuers
    put:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Issuer"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
            - rw:serverAdmin
      responses:
        "200":
          schema:
            $ref: "#/definitions/Issuer"
          description: Successfully updated
        "400":
          description: Validation error
        "404":
          description: Issuer not found
      summary: Update a single Issuer
      tags:
        - Issuers
    delete:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
            - rw:serverAdmin
      responses:
        "204":
          description: Issuer was deleted successfully.
        "404":
          description: Issuer not found
      summary: Delete a single Issuer
      tags:
        - Issuers
  /v2/issuers/{entity_id}/assertions:
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: query
          name: recipient
          type: string
          description: A recipient identifier to filter by
        - in: query
          name: num
          type: string
          description: Request pagination of results, before/after cursors may be provided in response header
        - in: query
          name: before
          type: string
          description: Pagination cursor provided in "Link" response header
        - in: query
          name: after
          type: string
          description: Pagination cursor provided in "Link" response header
        - in: query
          name: include_expired
          type: boolean
          description: Include expired assertions
        - in: query
          name: include_revoked
          type: boolean
          description: Include revoked assertions
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            type: array
            items:
              $ref: "#/definitions/Assertion"
          description: Successful operation
      summary: Get a list of Assertions for a single Issuer
      tags:
        - Assertions
        - Issuers
    post:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Assertion"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "201":
          schema:
            $ref: "#/definitions/Assertion"
          description: Successfully created
        "400":
          description: Validation error
      summary: Issue a new Assertion to a recipient
      tags:
        - Assertions
        - Issuers
  /v2/issuers/{entity_id}/badgeclasses:
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: query
          name: num
          type: string
          description: Request pagination of results
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            type: array
            items:
              $ref: "#/definitions/BadgeClass"
          description: Successful operation
      summary: Get a list of BadgeClasses for a single Issuer
      description: Authenticated user must have owner, editor, or staff status on the Issuer
      tags:
        - Issuers
        - BadgeClasses
    post:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/BadgeClass"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "201":
          schema:
            $ref: "#/definitions/BadgeClass"
          description: Successfully created
        "400":
          description: Validation error
      summary: Create a new BadgeClass associated with an Issuer
      description: Authenticated user must have owner, editor, or staff status on the Issuer
      tags:
        - Issuers
        - BadgeClasses
  /v2/issuers/{entity_id}/staff:
    post:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
          description: entity_id of the Issuer
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/IssuerStaffRecipient"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "201":
          schema:
            $ref: "#/definitions/IssuerStaff"
          description: Successfully created
        "400":
          description: Validation error
        "404":
          description: Issuer not found
      summary: Add a staff member to an Issuer
      description: Authenticated user must have owner role on the Issuer
      tags:
        - Issuers
    put:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
          description: entity_id of the Issuer
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/IssuerStaffRecipient"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            $ref: "#/definitions/IssuerStaff"
          description: Successfully updated
        "400":
          description: Validation error
        "404":
          description: Issuer not found
      summary: Update a staff member's role on the Issuer
      description: Authenticated user must have owner role on the Issuer.
      tags:
        - Issuers
    patch:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
          description: entity_id of the Issuer
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/IssuerStaffRecipient"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            $ref: "#/definitions/IssuerStaff"
          description: Successfully updated
        "400":
          description: Validation error
        "404":
          description: Issuer not found
      summary: Update a staff member's role on the Issuer
      description: Authenticated user must have owner role on the Issuer
      tags:
        - Issuers
  /v2/issuers/{entity_id}/staff/{email}:
    delete:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
          description: entity_id of the Issuer
        - in: path
          name: email
          required: true
          type: string
          description: Base64 encoded email address of the staff member
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "204":
          description: Staff member successfully removed
        "400":
          description: Validation error
        "404":
          description: Issuer not found
      summary: Remove a staff member from the Issuer
      description: Authenticated user must have owner role on the Issuer
      tags:
        - Issuers
  /v2/issuers/{entity_id}/staff/invitations:
    post:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
          description: entity_id of the Issuer
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/IssuerStaffRecipient"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "201":
          schema:
            $ref: "#/definitions/IssuerStaffRecipient"
          description: Successfully invited
        "400":
          description: Validation error
        "404":
          description: Issuer not found
      summary: Invite a staff member to an Issuer
      description: Authenticated user must have owner role on the Issuer
      tags:
        - Issuers
  /v2/badgeclasses:
    get:
      parameters: []
      security:
        - oauth2:
            - rw:issuer
      responses:
        "200":
          schema:
            type: array
            items:
              $ref: "#/definitions/BadgeClass"
          description: Successful operation
      summary: Get a list of BadgeClasses for authenticated user
      tags:
        - BadgeClasses
    post:
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/BadgeClass"
        - in: query
          name: num
          type: string
          description: Request pagination of results
      security:
        - oauth2:
            - rw:issuer
      responses:
        "201":
          schema:
            $ref: "#/definitions/BadgeClass"
          description: Successfully created
        "400":
          description: Validation error
      summary: Create a new BadgeClass
      tags:
        - BadgeClasses
  /v2/badgeclasses/ref/{badge_ref}:
    get:
      parameters:
        - in: path
          name: badge_ref
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            $ref: "#/definitions/BadgeClass"
          description: Successful operation
        "404":
          description: BadgeClass not found
      summary: Get a single BadgeClass
      tags:
        - BadgeClasses
    put:
      parameters:
        - in: path
          name: badge_ref
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/BadgeClass"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            $ref: "#/definitions/BadgeClass"
          description: Successfully updated
        "400":
          description: Validation error
        "404":
          description: BadgeClass not found
      summary: Update an existing BadgeClass.  Previously awarded Assertions will be updated with image rebaking
      tags:
        - BadgeClasses
    delete:
      parameters:
        - in: path
          name: badge_ref
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "204":
          description: BadgeClass was deleted successfully.
        "404":
          description: BadgeClass not found
      summary: Delete a BadgeClass
      description: Restricted to owners or editors (not staff) of the corresponding Issuer.
      tags:
        - BadgeClasses
  /v2/badgeclasses/{entity_id}:
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            $ref: "#/definitions/BadgeClass"
          description: Successful operation
        "404":
          description: BadgeClass not found
      summary: Get a single BadgeClass
      tags:
        - BadgeClasses
    put:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/BadgeClass"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            $ref: "#/definitions/BadgeClass"
          description: Successfully updated
        "400":
          description: Validation error
        "404":
          description: BadgeClass not found
      summary: Update an existing BadgeClass.  Previously awarded Assertions will be updated with image rebaking
      tags:
        - BadgeClasses
    delete:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "204":
          description: BadgeClass was deleted successfully.
        "404":
          description: BadgeClass not found
      summary: Delete a BadgeClass
      description: Restricted to owners or editors (not staff) of the corresponding Issuer.
      tags:
        - BadgeClasses
  /v2/badgeclasses/{entity_id}/assertions:
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: query
          name: recipient
          type: string
          description: A recipient identifier to filter by
        - in: query
          name: num
          type: string
          description: Request pagination of results, before/after cursors may be provided in response header
        - in: query
          name: before
          type: string
          description: Pagination cursor provided in "Link" response header
        - in: query
          name: after
          type: string
          description: Pagination cursor provided in "Link" response header
        - in: query
          name: include_expired
          type: boolean
          description: Include expired assertions
        - in: query
          name: include_revoked
          type: boolean
          description: Include revoked assertions
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            type: array
            items:
              $ref: "#/definitions/Assertion"
          description: Successful operation
      summary: Get a list of Assertions for a single BadgeClass
      tags:
        - Assertions
        - BadgeClasses
    post:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Assertion"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "201":
          schema:
            $ref: "#/definitions/Assertion"
          description: Successfully created
        "400":
          description: Validation error
      summary: Issue an Assertion to a single recipient
      tags:
        - Assertions
        - BadgeClasses
  /v2/assertions/{entity_id}:
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            $ref: "#/definitions/Assertion"
          description: Successful operation
        "404":
          description: Assertion not found
      summary: Get a single Assertion
      tags:
        - Assertions
    put:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Assertion"
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "200":
          schema:
            $ref: "#/definitions/Assertion"
          description: Successfully updated
        "400":
          description: Validation error
        "404":
          description: Assertion not found
      summary: Update an Assertion
      tags:
        - Assertions
    delete:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              revocation_reason:
                type: string
                format: string
                description: The reason for revoking this assertion
                required: true
            required:
              - revocationReason
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      responses:
        "204":
          description: Assertion was deleted successfully.
        "400":
          description: Assertion is already revoked
        "404":
          description: Assertion not found
      summary: Revoke an Assertion
      tags:
        - Assertions
  /v2/users/{entity_id}:
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - r:profile
            - rw:profile
      responses:
        "200":
          schema:
            $ref: "#/definitions/BadgeUser"
          description: Successful operation
        "404":
          description: BadgeUser not found
      summary: Get a single BadgeUser profile
      description: Use the entityId 'self' to retrieve the authenticated user's profile
      tags:
        - BadgeUsers
    put:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/BadgeUser"
      security:
        - oauth2:
            - rw:profile
      responses:
        "200":
          schema:
            $ref: "#/definitions/BadgeUser"
          description: Successfully updated
        "400":
          description: Validation error
        "404":
          description: BadgeUser not found
      summary: Update a BadgeUser
      description: Use the entityId 'self' to update the authenticated user's profile
      tags:
        - BadgeUsers
  /v2/backpack/assertions:
    get:
      parameters: []
      security:
        - oauth2:
            - r:backpack
            - rw:backpack
      responses:
        "200":
          schema:
            type: array
            items:
              $ref: "#/definitions/Assertion"
          description: Successful operation
      summary: "Get a list of Assertions in authenticated user's backpack "
      tags:
        - Backpack
    post:
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Assertion"
      security:
        - oauth2:
            - rw:backpack
      responses:
        "201":
          schema:
            $ref: "#/definitions/Assertion"
          description: Successfully created
        "400":
          description: Validation error
      summary: Upload a new Assertion to the backpack
      tags:
        - Backpack
  /v2/backpack/assertions/{entity_id}:
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - r:backpack
            - rw:backpack
      responses:
        "200":
          schema:
            $ref: "#/definitions/BackpackAssertion"
          description: Successful operation
        "404":
          description: BackpackAssertion not found
      summary: Get detail on an Assertion in the user's Backpack
      tags:
        - Backpack
    put:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/BackpackAssertion"
      security:
        - oauth2:
            - rw:backpack
      responses:
        "200":
          schema:
            $ref: "#/definitions/BackpackAssertion"
          description: Successfully updated
        "400":
          description: Validation error
        "404":
          description: BackpackAssertion not found
      summary: Update acceptance of an Assertion in the user's Backpack
      tags:
        - Backpack
    delete:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - rw:backpack
      responses:
        "204":
          description: BackpackAssertion was deleted successfully.
        "404":
          description: BackpackAssertion not found
      summary: Remove an assertion from the backpack
      tags:
        - Backpack
  /v2/backpack/collections:
    get:
      parameters: []
      security:
        - oauth2:
            - r:backpack
            - rw:backpack
      responses:
        "200":
          schema:
            $ref: "#/definitions/Collection"
          description: Successful operation
        "404":
          description: Collection not found
      summary: Get a list of Collections
      tags:
        - Backpack
    post:
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Collection"
      security:
        - oauth2:
            - rw:backpack
      responses:
        "201":
          schema:
            $ref: "#/definitions/Collection"
          description: Successfully created
        "400":
          description: Validation error
      summary: Create a new Collection
      tags:
        - Backpack
  /v2/backpack/collections/{entity_id}:
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - r:backpack
            - rw:backpack
      responses:
        "200":
          schema:
            $ref: "#/definitions/Collection"
          description: Successful operation
        "404":
          description: Collection not found
      summary: Get a single Collection
      tags:
        - Backpack
    put:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Collection"
      security:
        - oauth2:
            - rw:backpack
      responses:
        "200":
          schema:
            $ref: "#/definitions/Collection"
          description: Successfully updated
        "400":
          description: Validation error
        "404":
          description: Collection not found
      summary: Update a Collection
      tags:
        - Backpack
    delete:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - rw:backpack
      responses:
        "204":
          description: Collection was deleted successfully.
        "404":
          description: Collection not found
      summary: Delete a collection
      tags:
        - Backpack
  /v2/badgeclasses/reactivate/{entity_id}:
    post:
      parameters:
        - in: path
          name: entity_id
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      summary: Reactivate a BadgeClass by id
      description: Reactivate a BadgeClass that was archived
      tags:
        - BadgeClasses
  /v2/badgeclasses/reactivate/ref/{badge_ref}:
    post:
      parameters:
        - in: path
          name: badge_ref
          required: true
          type: string
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      summary: Reactivate a BadgeClass by Ref
      description: Reactivate a BadgeClass that was archived
      tags:
        - BadgeClasses
  /v2/assertions/revoke:
    post:
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              type: object
              properties:
                entityId:
                  type: string
                  name: Entity ID
                  description: Entity ID of the Assertion
                revocationReason:
                  type: string
                  name: Revocation Reason
                  description: Reason for revoking the Assertion
              required:
                - entityId
                - revocationReason
      security:
        - oauth2:
            - rw:issuer
            - rw:issuer:*
      summary: Revoke multiple Assertions
      tags:
        - Assertions
      responses:
        "200":
          description: Revoke multiple Assertions requested. See response data array for individual result.
  /v2/backpack/import:
    post:
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              url:
                type: string
                format: url
                description: URL to an OpenBadge compliant badge
                required: false
              image:
                type: string
                format: data:image/png;base64
                description: base64 encoded Baked OpenBadge image
                required: false
              assertion:
                type: json
                description: OpenBadge compliant json
                required: false
      security:
        - oauth2:
            - rw:backpack
      summary: Import a new Assertion to the backpack
      tags:
        - Backpack
tags: []
securityDefinitions:
  oauth2:
    type: oauth2
    flow: authorizationCode
    authorizationUrl: /docs/oauth2/authorize
    tokenUrl: /o/token/
    scopes:
      "*": "*"
      https://purl.imsglobal.org/spec/ob/v2p1/scope/assertion.create: Add badges into a User's Backpack
      https://purl.imsglobal.org/spec/ob/v2p1/scope/assertion.readonly: List assertions in a User's Backpack
      https://purl.imsglobal.org/spec/ob/v2p1/scope/profile.readonly: See who you are
      r:assertions: r:assertions
      r:backpack: List assertions in your backpack
      r:issuer: r:issuer
      r:profile: See who you are
      rw:backpack: Upload badges into a backpack
      rw:issuer: Create and update issuers, create and update badge classes, and award assertions
      rw:issuerOwner:*: rw:issuerOwner:*
      rw:profile: Update your own user profile
security:
  - oauth2: []
