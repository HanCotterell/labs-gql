datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PersonType {
  MENTOR
  STUDENT
}

enum Track {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum MentorStatus {
  APPLIED
  SCHEDULED
  ACCEPTED
  REJECTED
  CANCELED
}

enum StudentStatus {
  APPLIED
  TRACK_INTERVIEW
  TRACK_CHALLENGE
  OFFERED
  ACCEPTED
  REJECTED
  CANCELED
}

enum ProjectStatus {
  DRAFT
  PROPOSED
  ACCEPTED
  MATCHED
}

enum RejectionReason {
  EXPERIENCE_HIGH
  EXPERIENCE_LOW
  OTHER
}

enum TagType {
  INTEREST
  TECHNOLOGY
}

enum QuestionType {
  TEXT
  NUMBER
  AGREE
  CHECKBOXES
  RADIOS
  DROPDOWN
  CONTENT
}

enum TrainingEntryType {
  ARTICLE
  VIDEO
  QUIZ
}

model Event {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  name           String
  startsAt       DateTime
  emailSignature String?

  title                   String
  defaultWeeks            Int      @default(4)
  certificationStatements String[]

  studentApplicationsStartAt    DateTime
  studentApplicationsEndAt      DateTime
  studentApplicationSchema      Json
  studentApplicationUi          Json
  studentApplicationPostprocess Json

  mentorApplicationsStartAt    DateTime
  mentorApplicationsEndAt      DateTime
  mentorApplicationSchema      Json
  mentorApplicationUi          Json
  mentorApplicationPostprocess Json

  hasBeginner     Boolean @default(true)
  hasIntermediate Boolean @default(true)
  hasAdvanced     Boolean @default(true)

  isActive                      Boolean @default(false)
  matchPreferenceSubmissionOpen Boolean @default(false)
  matchComplete                 Boolean @default(false)
  partnersOnly                  Boolean @default(false)

  slackWorkspaceId              String?
  slackUserGroupId              String?
  slackWorkspaceAccessToken     String?
  standupAndProsperToken        String?
  standupAiModelVague           String?
  standupAiModelVaguePending    String?
  standupAiModelWorkload        String?
  standupAiModelWorkloadPending String?

  studentTrainingGroup   TrainingGroup? @relation(fields: [studentTrainingGroupId], references: [id])
  studentTrainingGroupId String?

  surveys        Survey[]
  mentors        Mentor[]
  students       Student[]
  projects       Project[]
  partners       Partner[]
  notes          Note[]
  resources      Resource[]
  standupThreads StandupThread[]
  standupResults StandupResult[]
  meetings       Meeting[]
  artifactTypes  ArtifactType[]
}

model TrainingGroup {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  name String

  // Relations
  events  Event[]
  entries TrainingEntry[]
}

model TrainingEntry {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  sort            Int               @default(0)
  name            String
  type            TrainingEntryType
  content         String?
  videoId         String?
  videoTranscript String?
  quizSchema      Json?
  quizUi          Json?
  quizScore       String?

  // Relations
  trainingGroup   TrainingGroup @relation(fields: [trainingGroupId], references: [id])
  trainingGroupId String

  responses TrainingEntryResponse[]
}

model TrainingEntryResponse {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  score    Float
  response Json?

  // Relations
  trainingEntry   TrainingEntry @relation(fields: [trainingEntryId], references: [id])
  trainingEntryId String

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
}

model Meeting {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  visibleAt DateTime
  dueAt     DateTime

  sentAgendaVisibleReminder Boolean @default(false)
  sentAgendaOverdueReminder Boolean @default(false)
  sentMeetingReminder       Boolean @default(false)

  agendaStudentSchema Json?
  agendaStudentUi     Json?

  notesStudentSchema Json?
  notesStudentUi     Json?

  // Relations
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  responses  MeetingResponse[]
  attendance MeetingAttendance[]
}

model MeetingAttendance {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attended Boolean @default(false)
  prepared Boolean @default(false)

  // Relations
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
}

model MeetingResponse {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agenda Json?
  notes  Json?

  // Relations
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String

  authorStudent   Student? @relation(fields: [authorStudentId], references: [id])
  authorStudentId String?
}

model Survey {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  slug       String
  name       String
  intro      String?
  randomize  Boolean    @default(false)
  internal   Boolean    @default(false)
  personType PersonType

  selfSchema  Json?
  selfUi      Json?
  selfShare   Json?
  selfCaution String?
  selfDisplay String?

  peerSchema  Json?
  peerUi      Json?
  peerShare   Json?
  peerCaution String?
  peerDisplay String?

  menteeSchema  Json?
  menteeUi      Json?
  menteeShare   Json?
  menteeCaution String?
  menteeDisplay String?

  mentorSchema  Json?
  mentorUi      Json?
  mentorShare   Json?
  mentorCaution String?
  mentorDisplay String?

  projectSchema  Json?
  projectUi      Json?
  projectShare   Json?
  projectCaution String?
  projectDisplay String?

  // Relations
  event            Event             @relation(fields: [eventId], references: [id])
  eventId          String
  surveyOccurences SurveyOccurence[]
}

model SurveyOccurence {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visibleAt DateTime
  dueAt     DateTime

  sentVisibleReminder Boolean @default(false)
  sentOverdueReminder Boolean @default(false)

  survey   Survey @relation(fields: [surveyId], references: [id])
  surveyId String

  surveyResponses SurveyResponse[]
}

model SurveyResponse {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  response Json
  caution  Float

  // Relations
  surveyOccurence   SurveyOccurence @relation(fields: [surveyOccurenceId], references: [id])
  surveyOccurenceId String

  authorStudent   Student? @relation(name: "AuthorStudent", fields: [authorStudentId], references: [id])
  authorStudentId String?

  authorMentor   Mentor? @relation(name: "AuthorMentor", fields: [authorMentorId], references: [id])
  authorMentorId String?

  student   Student? @relation(name: "TargetStudent", fields: [studentId], references: [id])
  studentId String?

  mentor   Mentor? @relation(name: "TargetMentor", fields: [mentorId], references: [id])
  mentorId String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Mentor {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  givenName          String
  surname            String
  username           String?
  email              String
  profile            Json
  status             MentorStatus @default(APPLIED)
  managerUsername    String?
  maxWeeks           Int          @default(6)
  timezone           String?
  slackId            String?
  projectPreferences String?

  // Relations
  projects                Project[]
  emailsSent              EmailSent[]
  authoredSurveyResponses SurveyResponse[] @relation("AuthorMentor")
  targetSurveyResponses   SurveyResponse[] @relation("TargetMentor")
  projectEmails           ProjectEmail[]
  artifacts               Artifact[]

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @default("codeday-labs-2022")

  @@unique([username, eventId])
  @@unique([email, eventId])
}

model Student {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  givenName          String
  surname            String
  username           String
  email              String
  profile            Json
  track              Track
  status             StudentStatus    @default(APPLIED)
  rejectionReason    RejectionReason?
  offerDate          DateTime?
  weeks              Int              @default(6)
  minHours           Int
  partnerCode        String?
  skipPreferences    Boolean          @default(false)
  timeManagementPlan Json?
  timezone           String?
  interviewNotes     String?

  slackId String?

  // Relations
  projects                Project[]
  admissionRatings        AdmissionRating[]
  tags                    Tag[]
  emailsSent              EmailSent[]
  projectPreferences      ProjectPreference[]
  tagTrainingSubmissions  TagTrainingSubmission[]
  authoredSurveyResponses SurveyResponse[]        @relation("AuthorStudent")
  targetSurveyResponses   SurveyResponse[]        @relation("TargetStudent")
  meetingResponses        MeetingResponse[]
  meetingAttendance       MeetingAttendance[]
  trainingEntryResponses  TrainingEntryResponse[]
  projectEmails           ProjectEmail[]
  artifacts               Artifact[]

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @default("codeday-labs-2022")

  notes          Note[]
  standupResults StandupResult[]
  @@unique([username, eventId])
  @@unique([email, eventId])
}

model Partner {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  partnerCode     String
  weeks           Int?
  minHours        Int?
  skipPreferences Boolean @default(false)
  onlyAffine      Boolean @default(false)
  autoApprove     Boolean @default(false)

  forceTags  Tag[] @relation("PartnerForceTag")
  forbidTags Tag[] @relation("PartnerForbidTag")

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  affineProjects Project[]

  @@unique([partnerCode, eventId])
}

model Project {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  description  String?       @db.Text
  deliverables String?       @db.Text
  track        Track
  maxStudents  Int           @default(4)
  status       ProjectStatus @default(DRAFT)
  issueUrl     String?
  complete     Boolean       @default(false)

  slackChannelId String?
  standupId      String?

  // Relations
  tags                  Tag[]
  mentors               Mentor[]
  students              Student[]
  emailsSent            EmailSent[]
  projectPreferences    ProjectPreference[]
  targetSurveyResponses SurveyResponse[]
  projectEmails         ProjectEmail[]

  affinePartner   Partner? @relation(fields: [affinePartnerId], references: [id])
  affinePartnerId String?

  repository   Repository? @relation(fields: [repositoryId], references: [id])
  repositoryId String?

  event          Event?          @relation(fields: [eventId], references: [id])
  eventId        String?
  standupThreads StandupThread[]
  standupResults StandupResult[]
  artifacts      Artifact[]
}

model ArtifactType {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  name        String
  personType  PersonType?
  description String?
  required    Boolean     @default(false)

  // Relations
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  artifacts Artifact[]
}

model Artifact {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  name String
  link String

  // Relations
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?

  mentor   Mentor? @relation(fields: [mentorId], references: [id])
  mentorId String?

  artifactType   ArtifactType? @relation(fields: [artifactTypeId], references: [id])
  artifactTypeId String?
}

model Repository {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  logoUrl String?
  name    String
  url     String

  // Relations
  projects Project[]
}

model ProjectEmail {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  subject  String?
  to       String?
  cc       String?
  textBody String?
  htmlBody String?

  // Relations
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?

  mentor   Mentor? @relation(fields: [mentorId], references: [id])
  mentorId String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  emailSent   EmailSent? @relation(fields: [emailSentId], references: [id])
  emailSentId String?
}

model AdmissionRating {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  ratedBy String
  rating  Int
  track   Track

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
}

model ProjectPreference {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  ranking Int

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model Tag {
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  id                 String  @id
  mentorDisplayName  String
  studentDisplayName String
  trainingLink       String?
  type               TagType

  // Relations
  students               Student[]
  projects               Project[]
  tagTrainingSubmissions TagTrainingSubmission[]
  forcedPartners         Partner[]               @relation("PartnerForceTag")
  forbiddenPartners      Partner[]               @relation("PartnerForbidTag")
}

model TagTrainingSubmission {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  url String

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String
}

model EmailSent {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  emailId String

  // Relations
  mentor   Mentor? @relation(fields: [mentorId], references: [id])
  mentorId String?

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  projectEmails ProjectEmail[]
}

model Note {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  note     String
  username String
  caution  Float

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @default("codeday-labs-2022")
}

model Resource {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  name              String
  link              String
  displayToMentors  Boolean
  displayToStudents Boolean
  displayToPartners Boolean
  displayToManagers Boolean

  // Relations
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
}

model StandupThread {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dueAt DateTime

  results StandupResult[]

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @default("codeday-labs-2022")
}

model StandupResult {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text              String
  rating            Int?
  humanRated        Boolean @default(false)
  trainingSubmitted Boolean @default(false)

  // Relations
  thread   StandupThread @relation(fields: [threadId], references: [id])
  threadId String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @default("codeday-labs-2022")
}
