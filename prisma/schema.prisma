datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PersonType {
  MENTOR
  STUDENT
}

enum Track {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum MentorStatus {
  APPLIED
  SCHEDULED
  ACCEPTED
  REJECTED
  CANCELED
}

enum StudentStatus {
  APPLIED
  TRACK_INTERVIEW
  TRACK_CHALLENGE
  OFFERED
  ACCEPTED
  REJECTED
  CANCELED
}

enum ProjectStatus {
  DRAFT
  PROPOSED
  ACCEPTED
  MATCHED
}

enum RejectionReason {
  EXPERIENCE_HIGH
  EXPERIENCE_LOW
  OTHER
}

enum TagType {
  INTEREST
  TECHNOLOGY
}

enum QuestionType {
  TEXT
  NUMBER
  AGREE
  CHECKBOXES
  RADIOS
  DROPDOWN
  CONTENT
}

model Event {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  name     String
  startsAt DateTime
  title    String

  studentApplicationsStartAt    DateTime
  studentApplicationsEndAt      DateTime
  studentApplicationSchema      Json
  studentApplicationUi          Json
  studentApplicationPostprocess Json

  mentorApplicationsStartAt    DateTime
  mentorApplicationsEndAt      DateTime
  mentorApplicationSchema      Json
  mentorApplicationUi          Json
  mentorApplicationPostprocess Json

  isActive                      Boolean @default(false)
  matchPreferenceSubmissionOpen Boolean @default(false)
  matchComplete                 Boolean @default(false)

  slackWorkspaceId              String?
  slackUserGroupId              String?
  slackWorkspaceAccessToken     String?
  standupAndProsperToken        String?
  standupAiModelVague           String?
  standupAiModelVaguePending    String?
  standupAiModelWorkload        String?
  standupAiModelWorkloadPending String?

  surveys        Survey[]
  mentors        Mentor[]
  students       Student[]
  projects       Project[]
  partners       Partner[]
  notes          Note[]
  resources      Resource[]
  standupThreads StandupThread[]
  standupResults StandupResult[]
}

model Survey {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  slug       String
  name       String
  intro      String?
  randomize  Boolean    @default(false)
  internal   Boolean    @default(false)
  personType PersonType

  selfSchema  Json?
  selfUi      Json?
  selfShare   Json?
  selfCaution String?
  selfDisplay String?

  peerSchema  Json?
  peerUi      Json?
  peerShare   Json?
  peerCaution String?
  peerDisplay String?

  menteeSchema  Json?
  menteeUi      Json?
  menteeShare   Json?
  menteeCaution String?
  menteeDisplay String?

  mentorSchema  Json?
  mentorUi      Json?
  mentorShare   Json?
  mentorCaution String?
  mentorDisplay String?

  projectSchema  Json?
  projectUi      Json?
  projectShare   Json?
  projectCaution String?
  projectDisplay String?

  // Relations
  event            Event             @relation(fields: [eventId], references: [id])
  eventId          String
  surveyOccurences SurveyOccurence[]
}

model SurveyOccurence {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visibleAt DateTime
  dueAt     DateTime

  sentVisibleReminder Boolean @default(false)
  sentOverdueReminder Boolean @default(false)

  survey   Survey @relation(fields: [surveyId], references: [id])
  surveyId String

  surveyResponses SurveyResponse[]
}

model SurveyResponse {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  response Json
  caution  Float

  // Relations
  surveyOccurence   SurveyOccurence @relation(fields: [surveyOccurenceId], references: [id])
  surveyOccurenceId String

  authorStudent   Student? @relation(name: "AuthorStudent", fields: [authorStudentId], references: [id])
  authorStudentId String?

  authorMentor   Mentor? @relation(name: "AuthorMentor", fields: [authorMentorId], references: [id])
  authorMentorId String?

  student   Student? @relation(name: "TargetStudent", fields: [studentId], references: [id])
  studentId String?

  mentor   Mentor? @relation(name: "TargetMentor", fields: [mentorId], references: [id])
  mentorId String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Mentor {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  givenName       String
  surname         String
  username        String?
  email           String
  profile         Json
  status          MentorStatus @default(APPLIED)
  managerUsername String?
  maxWeeks        Int          @default(6)
  timezone        String?

  // Relations
  projects                Project[]
  emailsSent              EmailSent[]
  authoredSurveyResponses SurveyResponse[] @relation("AuthorMentor")
  targetSurveyResponses   SurveyResponse[] @relation("TargetMentor")

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @default("codeday-labs-2022")

  @@unique([username, eventId])
  @@unique([email, eventId])
}

model Student {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  givenName          String
  surname            String
  username           String
  email              String
  profile            Json
  track              Track
  status             StudentStatus    @default(APPLIED)
  rejectionReason    RejectionReason?
  offerDate          DateTime?
  weeks              Int              @default(6)
  minHours           Int
  partnerCode        String?
  skipPreferences    Boolean          @default(false)
  timeManagementPlan Json?
  timezone           String?

  slackId String?

  // Relations
  projects                Project[]
  admissionRatings        AdmissionRating[]
  tags                    Tag[]
  emailsSent              EmailSent[]
  projectPreferences      ProjectPreference[]
  tagTrainingSubmissions  TagTrainingSubmission[]
  authoredSurveyResponses SurveyResponse[]        @relation("AuthorStudent")
  targetSurveyResponses   SurveyResponse[]        @relation("TargetStudent")

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @default("codeday-labs-2022")

  notes          Note[]
  standupResults StandupResult[]
  @@unique([username, eventId])
  @@unique([email, eventId])
}

model Partner {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  partnerCode     String
  weeks           Int?
  minHours        Int?
  skipPreferences Boolean @default(false)
  onlyAffine      Boolean @default(false)

  forceTags  Tag[] @relation("PartnerForceTag")
  forbidTags Tag[] @relation("PartnerForbidTag")

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  affineProjects Project[]

  @@unique([partnerCode, eventId])
}

model Project {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  description  String?       @db.Text
  deliverables String?       @db.Text
  track        Track
  maxStudents  Int           @default(4)
  status       ProjectStatus @default(DRAFT)

  slackChannelId String?
  standupId      String?

  // Relations
  tags                  Tag[]
  mentors               Mentor[]
  students              Student[]
  emailsSent            EmailSent[]
  projectPreferences    ProjectPreference[]
  targetSurveyResponses SurveyResponse[]

  affinePartner   Partner? @relation(fields: [affinePartnerId], references: [id])
  affinePartnerId String?

  event          Event           @relation(fields: [eventId], references: [id])
  eventId        String          @default("codeday-labs-2022")
  standupThreads StandupThread[]
  standupResults StandupResult[]
}

model AdmissionRating {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  ratedBy String
  rating  Int
  track   Track

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
}

model ProjectPreference {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  ranking Int

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model Tag {
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  id                 String  @id
  mentorDisplayName  String
  studentDisplayName String
  trainingLink       String?
  type               TagType

  // Relations
  students               Student[]
  projects               Project[]
  tagTrainingSubmissions TagTrainingSubmission[]
  forcedPartners         Partner[]               @relation("PartnerForceTag")
  forbiddenPartners      Partner[]               @relation("PartnerForbidTag")
}

model TagTrainingSubmission {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  url String

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String
}

model EmailSent {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  emailId String

  // Relations
  mentor   Mentor? @relation(fields: [mentorId], references: [id])
  mentorId String?

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Note {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  note     String
  username String
  caution  Float

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @default("codeday-labs-2022")
}

model Resource {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Data
  name              String
  link              String
  displayToMentors  Boolean
  displayToStudents Boolean
  displayToPartners Boolean
  displayToManagers Boolean

  // Relations
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
}

model StandupThread {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dueAt DateTime

  results StandupResult[]

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @default("codeday-labs-2022")
}

model StandupResult {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text              String
  rating            Int?
  humanRated        Boolean @default(false)
  trainingSubmitted Boolean @default(false)

  // Relations
  thread   StandupThread @relation(fields: [threadId], references: [id])
  threadId String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @default("codeday-labs-2022")
}
