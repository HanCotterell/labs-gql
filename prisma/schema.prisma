datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByAggregateGroup"]
}

enum Track {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum MentorStatus {
  APPLIED
  SCHEDULED
  ACCEPTED
  REJECTED
  CANCELED
}

enum StudentStatus {
  APPLIED
  TRACK_INTERVIEW
  TRACK_CHALLENGE
  OFFERED
  ACCEPTED
  REJECTED
  CANCELED
}

enum ProjectStatus {
  DRAFT
  PROPOSED
  ACCEPTED
  MATCHED
}

enum RejectionReason {
  EXPERIENCE_HIGH
  EXPERIENCE_LOW
  OTHER
}

enum TagType {
  INTEREST
  TECHNOLOGY
}

model Mentor {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Data
  givenName       String
  surname         String
  username        String?      @unique
  email           String
  profile         Json
  status          MentorStatus @default(APPLIED)
  managerUsername String?
  maxWeeks        Int          @default(6)

  // Relations
  projects   Project[]
  emailsSent EmailSent[]
}

model Student {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Data
  givenName       String
  surname         String
  username        String           @unique
  email           String
  profile         Json
  track           Track
  status          StudentStatus    @default(APPLIED)
  rejectionReason RejectionReason?
  offerDate       DateTime?
  weeks           Int              @default(6)
  minHours        Int
  partnerCode     String?

  // Relations
  projects               Project[]
  admissionRatings       AdmissionRating[]
  tags                   Tag[]
  emailsSent             EmailSent[]
  projectPreferences     ProjectPreference[]
  tagTrainingSubmissions TagTrainingSubmission[]
}

model Project {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Data
  description  String?       @db.Text
  deliverables String?       @db.Text
  track        Track
  maxStudents  Int           @default(4)
  status       ProjectStatus @default(DRAFT)

  // Relations
  tags               Tag[]
  mentors            Mentor[]
  students           Student[]
  emailsSent         EmailSent[]
  projectPreferences ProjectPreference[]
}

model AdmissionRating {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Data
  ratedBy String
  rating  Int
  track   Track

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
}

model ProjectPreference {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Data
  ranking Int

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model Tag {
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Data
  id                 String  @id
  mentorDisplayName  String
  studentDisplayName String
  trainingLink       String?
  type               TagType

  // Relations
  students               Student[]
  projects               Project[]
  tagTrainingSubmissions TagTrainingSubmission[]
}

model TagTrainingSubmission {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Data
  url String

  // Relations
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String
}

model EmailSent {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Data
  emailId String

  // Relations
  mentor   Mentor? @relation(fields: [mentorId], references: [id])
  mentorId String?

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}
